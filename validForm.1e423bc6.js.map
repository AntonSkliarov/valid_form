{"version":3,"sources":["helpers/_functions.js","scripts/validForm.js"],"names":["FUNC","createErrorElement","elementName","errorElement","document","createElement","innerHTML","errorText","setAttribute","validateForm","event","isFieldsValid","name","input","getElementById","container","querySelector","push","nameValue","value","trim","append","setTimeout","remove","length","validateName","every","fieldValid","preventDefault","form","addEventListener"],"mappings":";AAUeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAVf,IAAMA,EAAO,CACXC,mBAAoB,SAACC,GACbC,IAAAA,EAAeC,SAASC,cAAc,KAIrCF,OAHPA,EAAaG,UAAYJ,EAAYK,UACrCJ,EAAaK,aAAa,QAAS,SAE5BL,IAIIH,EAAAA,EAAAA,QAAAA,QAAAA;;AC6Df,aAvEA,IAAA,EAAA,EAAA,QAAA,0BAuEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArEA,IAAMS,EAAe,SAACC,GACdC,IAAAA,EAAgB,GAChBC,EAAO,CACXC,MAAOT,SAASU,eAAe,QAC/BC,UAAWX,SAASY,cAAc,mBAClCT,UAAW,MAIJH,SAASU,eAAe,WACpBV,SAASY,cAAc,sBAgDpCL,EAAcM,KA3CO,WACbC,IAAAA,EAAYN,EAAKC,MAAMM,MAAMC,OAE/BF,GAAc,KAAdA,EAAkB,CACpBN,EAAKL,UAAY,6BAEXJ,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBW,GAOtC,OANPA,EAAKG,UAAUM,OAAOlB,GAEtBmB,WAAW,WACTnB,EAAaoB,UACZ,MAEI,EAGLL,GAAAA,EAAUM,OAAS,EAAG,CACxBZ,EAAKL,UAAY,oCACXJ,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBW,GAOtC,OANPA,EAAKG,UAAUM,OAAOlB,GAEtBmB,WAAW,WACTnB,EAAaoB,UACZ,MAEI,EAGLL,GAAAA,EAAUM,QAAU,GAAI,CAC1BZ,EAAKL,UAAY,uCACXJ,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBW,GAOtC,OANPA,EAAKG,UAAUM,OAAOlB,GAEtBmB,WAAW,WACTnB,EAAaoB,UACZ,MAEI,EAGF,OAAA,EAGUE,IAGMd,EAAce,MAAM,SAACC,GAAeA,OAAe,IAAfA,KAG3DjB,EAAMkB,kBAIJC,EAAOzB,SAASY,cAAc,cACpCa,EAAKC,iBAAiB,SAAUrB","file":"validForm.1e423bc6.js","sourceRoot":"..\\src","sourcesContent":["const FUNC = {\n  createErrorElement: (elementName) => {\n    const errorElement = document.createElement('p');\n    errorElement.innerHTML = elementName.errorText;\n    errorElement.setAttribute('class', 'error');\n\n    return errorElement;\n  },\n};\n\nexport default FUNC;\n","import FUNC from '../helpers/_functions';\n\nconst validateForm = (event) => {\n  const isFieldsValid = [];\n  const name = {\n    input: document.getElementById('name'),\n    container: document.querySelector('#name-container'),\n    errorText: null,\n  };\n\n  const surname = {\n    input: document.getElementById('surname'),\n    container: document.querySelector('#surname-container'),\n    errorText: null,\n  };\n\n  // name validation start\n  const validateName = () => {\n    const nameValue = name.input.value.trim();\n\n    if (nameValue === '') {\n      name.errorText = 'Field name cannot be empty';\n\n      const errorElement = FUNC.createErrorElement(name);\n      name.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    if (nameValue.length < 3) {\n      name.errorText = 'Name must be minimum 3 characters';\n      const errorElement = FUNC.createErrorElement(name);\n      name.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    if (nameValue.length >= 20) {\n      name.errorText = 'Name must be less than 20 characters';\n      const errorElement = FUNC.createErrorElement(name);\n      name.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  isFieldsValid.push(validateName());\n  // name validation end\n\n  const isAllFieldsValid = isFieldsValid.every((fieldValid) => fieldValid === true);\n\n  if (!isAllFieldsValid) {\n    event.preventDefault();\n  }\n};\n\nconst form = document.querySelector('.user-form');\nform.addEventListener('submit', validateForm);\n"]}