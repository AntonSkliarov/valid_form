{"version":3,"sources":["helpers/_functions.js","scripts/validForm.js"],"names":["FUNC","createErrorElement","elementName","errorElement","document","createElement","innerHTML","errorText","setAttribute","validateForm","event","isFieldsValid","name","title","input","getElementById","container","querySelector","surname","phone","validateTextTypeInput","el","textTypeElement","elementValue","value","trim","toLowerCase","append","setTimeout","remove","length","push","validateTelTypeInput","phoneValue","regex","test","isAllFieldsValid","every","fieldValid","preventDefault","form","addEventListener"],"mappings":"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","file":"validForm.4c880b84.js","sourceRoot":"..\\src","sourcesContent":["const FUNC = {\n  createErrorElement: (elementName) => {\n    const errorElement = document.createElement('p');\n    errorElement.innerHTML = elementName.errorText;\n    errorElement.setAttribute('class', 'error');\n\n    return errorElement;\n  },\n};\n\nexport default FUNC;\n","import FUNC from '../helpers/_functions';\n\nconst validateForm = (event) => {\n  const isFieldsValid = [];\n\n  const name = {\n    title: 'Name',\n    input: document.getElementById('name'),\n    container: document.querySelector('#name-container'),\n    errorText: null,\n  };\n\n  const surname = {\n    title: 'Surname',\n    input: document.getElementById('surname'),\n    container: document.querySelector('#surname-container'),\n    errorText: null,\n  };\n\n  const phone = {\n    title: 'Phone',\n    input: document.getElementById('phone'),\n    container: document.querySelector('#phone-container'),\n    errorText: null,\n  };\n\n  // text type validation start\n  const validateTextTypeInput = (el) => {\n    const textTypeElement = el;\n\n    const elementValue = textTypeElement.input.value.trim();\n\n    if (elementValue === '') {\n      textTypeElement.errorText = `Field ${textTypeElement.title.toLowerCase()} cannot be empty`;\n\n      const errorElement = FUNC.createErrorElement(textTypeElement);\n      textTypeElement.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    if (elementValue.length < 3) {\n      textTypeElement.errorText = `${textTypeElement.title} must be minimum 3 characters`;\n\n      const errorElement = FUNC.createErrorElement(textTypeElement);\n      textTypeElement.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    if (elementValue.length >= 20) {\n      textTypeElement.errorText = `${textTypeElement.title} must be less than 20 characters`;\n\n      const errorElement = FUNC.createErrorElement(textTypeElement);\n      textTypeElement.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  isFieldsValid.push(validateTextTypeInput(name));\n  isFieldsValid.push(validateTextTypeInput(surname));\n  // text type validation end\n\n  // phone validation start\n  const validateTelTypeInput = () => {\n    const phoneValue = phone.input.value.trim();\n\n    if (phoneValue === '') {\n      phone.errorText = `Field ${phone.title.toLowerCase()} cannot be empty`;\n\n      const errorElement = FUNC.createErrorElement(phone);\n      phone.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    const regex = /^\\+38\\(0\\d{2}\\)\\s\\d{3}\\s\\d{2}\\s\\d{2}$/;\n\n    if (!regex.test(phoneValue)) {\n      phone.errorText = 'Phone format does not match';\n\n      const errorElement = FUNC.createErrorElement(phone);\n      phone.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 4000);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  isFieldsValid.push(validateTelTypeInput());\n  // phone validation end\n  const isAllFieldsValid = isFieldsValid.every((fieldValid) => fieldValid === true);\n\n  if (!isAllFieldsValid) {\n    event.preventDefault();\n  }\n};\n\nconst form = document.querySelector('.user-form');\nform.addEventListener('submit', validateForm);\n"]}