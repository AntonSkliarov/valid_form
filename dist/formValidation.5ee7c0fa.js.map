{"version":3,"sources":["helpers/_functions.js","helpers/_constants.js","scripts/formValidation.js"],"names":["FUNC","createErrorElement","elementName","errorElement","document","createElement","innerHTML","errorText","setAttribute","setNotValid","el","inputs","isAllFieldsValid","isValid","every","input","appendError","element","container","append","INPUTS","title","type","getElementById","querySelector","DOM","form","INPUT_TYPES","text","phone","email","pass","TEXT_LENGTH","min","max","REGEX","inputValidation","formElement","onfocus","remove","onblur","inputValue","value","trim","toLowerCase","length","test","formValidation","map","addEventListener","event","preventDefault"],"mappings":"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","file":"formValidation.5ee7c0fa.js","sourceRoot":"..\\src","sourcesContent":["const FUNC = {\n  createErrorElement: (elementName) => {\n    const errorElement = document.createElement('p');\n    errorElement.innerHTML = elementName.errorText;\n    errorElement.setAttribute('class', 'error');\n\n    return errorElement;\n  },\n  setNotValid: (el, inputs) => {\n    const element = el;\n\n    element.isValid = false;\n    const isAllFieldsValid = inputs.every((input) => input.isValid === true);\n\n    return isAllFieldsValid;\n  },\n\n  appendError: (el) => {\n    const element = el;\n\n    element.errorElement = FUNC.createErrorElement(element);\n    element.container.append(element.errorElement);\n  },\n};\n\nexport default FUNC;\n","export const INPUTS = [\n  {\n    title: 'Name',\n    type: 'text',\n    input: document.getElementById('name'),\n    container: document.querySelector('#name-container'),\n    errorText: null,\n    errorElement: null,\n    isValid: false,\n  },\n  {\n    title: 'Surname',\n    type: 'text',\n    input: document.getElementById('surname'),\n    container: document.querySelector('#surname-container'),\n    errorText: null,\n    errorElement: null,\n    isValid: false,\n  },\n  {\n    title: 'Phone',\n    type: 'tel',\n    input: document.getElementById('phone'),\n    container: document.querySelector('#phone-container'),\n    errorText: null,\n    errorElement: null,\n    isValid: false,\n  },\n  {\n    title: 'Email',\n    type: 'email',\n    input: document.getElementById('email'),\n    container: document.querySelector('#email-container'),\n    errorText: null,\n    errorElement: null,\n    isValid: false,\n  },\n  {\n    title: 'Password',\n    type: 'password',\n    input: document.getElementById('pass'),\n    container: document.querySelector('#pass-container'),\n    errorText: null,\n    errorElement: null,\n    isValid: false,\n  },\n];\n\nexport const DOM = {\n  form: document.querySelector('.user-form'),\n};\n\nexport const INPUT_TYPES = {\n  text: 'text',\n  phone: 'tel',\n  email: 'email',\n  pass: 'password',\n};\n\nexport const TEXT_LENGTH = {\n  min: 3,\n  max: 20,\n};\n\nexport const REGEX = {\n  email: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,\n  phone: /^\\+38\\(0\\d{2}\\)\\s\\d{3}\\s\\d{2}\\s\\d{2}$/,\n  pass: /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/,\n};\n","import FUNC from '../helpers/_functions';\nimport {\n  INPUTS,\n  DOM,\n  INPUT_TYPES,\n  TEXT_LENGTH,\n  REGEX,\n} from '../helpers/_constants';\n\nlet isAllFieldsValid = false;\n\nconst inputValidation = (element) => {\n  const formElement = element;\n\n  formElement.input.onfocus = () => {\n    if (formElement.errorElement) {\n      formElement.errorElement.remove();\n\n      isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n    }\n  };\n\n  formElement.input.onblur = () => {\n    const inputValue = formElement.input.value.trim();\n\n    if (inputValue === '') {\n      formElement.errorText = `Field ${formElement.title.toLowerCase()} cannot be empty`;\n\n      FUNC.appendError(formElement);\n\n      isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n\n      return;\n    }\n\n    if (formElement.type === INPUT_TYPES.text) {\n      if (inputValue.length < TEXT_LENGTH.min) {\n        formElement.errorText = `${formElement.title} must be minimum 3 characters`;\n\n        FUNC.appendError(formElement);\n\n        isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n\n        return;\n      }\n\n      if (inputValue.length >= TEXT_LENGTH.max) {\n        formElement.errorText = `${formElement.title} must be less than 20 characters`;\n\n        FUNC.appendError(formElement);\n\n        isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n\n        return;\n      }\n    }\n\n    if (formElement.type === INPUT_TYPES.email) {\n      if (!REGEX.email.test(inputValue)) {\n        formElement.errorText = `${formElement.title} format does not match`;\n\n        FUNC.appendError(formElement);\n\n        isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n\n        return;\n      }\n    }\n\n    if (formElement.type === INPUT_TYPES.phone) {\n      if (!REGEX.phone.test(inputValue)) {\n        formElement.errorText = `${formElement.title} format does not match`;\n\n        FUNC.appendError(formElement);\n\n        isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n\n        return;\n      }\n    }\n\n    if (formElement.type === INPUT_TYPES.pass) {\n      if (!REGEX.pass.test(inputValue)) {\n        formElement.errorText = `${formElement.title} format does not match`;\n\n        FUNC.appendError(formElement);\n\n        isAllFieldsValid = FUNC.setNotValid(formElement, INPUTS);\n\n        return;\n      }\n    }\n\n    formElement.isValid = true;\n\n    isAllFieldsValid = INPUTS.every((input) => input.isValid === true);\n  };\n};\n\nconst formValidation = () => {\n  INPUTS.map((input) => inputValidation(input));\n};\n\nformValidation();\n\nDOM.form.addEventListener('submit', (event) => {\n  if (!isAllFieldsValid) {\n    event.preventDefault();\n  }\n});\n"]}