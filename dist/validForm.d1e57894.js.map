{"version":3,"sources":["helpers/_functions.js","scripts/validForm.js"],"names":["FUNC","createErrorElement","elementName","errorElement","document","createElement","innerHTML","errorText","setAttribute","validateForm","event","isFieldsValid","name","title","input","getElementById","container","querySelector","surname","phone","validateTextTypeInput","el","textTypeElement","elementValue","value","trim","toLowerCase","append","setTimeout","remove","length","push","phoneValue","test","validateTelTypeInput","every","fieldValid","preventDefault","form","addEventListener"],"mappings":";AAUeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAVf,IAAMA,EAAO,CACXC,mBAAoB,SAACC,GACbC,IAAAA,EAAeC,SAASC,cAAc,KAIrCF,OAHPA,EAAaG,UAAYJ,EAAYK,UACrCJ,EAAaK,aAAa,QAAS,SAE5BL,IAIIH,EAAAA,EAAAA,QAAAA,QAAAA;;ACiHf,aA3HA,IAAA,EAAA,EAAA,QAAA,0BA2HA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAzHA,IAAMS,EAAe,SAACC,GACdC,IAAAA,EAAgB,GAEhBC,EAAO,CACXC,MAAO,OACPC,MAAOV,SAASW,eAAe,QAC/BC,UAAWZ,SAASa,cAAc,mBAClCV,UAAW,MAGPW,EAAU,CACdL,MAAO,UACPC,MAAOV,SAASW,eAAe,WAC/BC,UAAWZ,SAASa,cAAc,sBAClCV,UAAW,MAGPY,EAAQ,CACZN,MAAO,QACPC,MAAOV,SAASW,eAAe,SAC/BC,UAAWZ,SAASa,cAAc,oBAClCV,UAAW,MAIPa,EAAwB,SAACC,GACvBC,IAAAA,EAAkBD,EAElBE,EAAeD,EAAgBR,MAAMU,MAAMC,OAE7CF,GAAiB,KAAjBA,EAAqB,CACvBD,EAAgBf,UAAqBe,SAAAA,OAAAA,EAAgBT,MAAMa,cAA3D,oBAEMvB,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBqB,GAOtC,OANPA,EAAgBN,UAAUW,OAAOxB,GAEjCyB,WAAW,WACTzB,EAAa0B,UACZ,MAEI,EAGLN,GAAAA,EAAaO,OAAS,EAAG,CAC3BR,EAAgBf,UAAee,GAAAA,OAAAA,EAAgBT,MAA/C,iCAEMV,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBqB,GAOtC,OANPA,EAAgBN,UAAUW,OAAOxB,GAEjCyB,WAAW,WACTzB,EAAa0B,UACZ,MAEI,EAGLN,GAAAA,EAAaO,QAAU,GAAI,CAC7BR,EAAgBf,UAAee,GAAAA,OAAAA,EAAgBT,MAA/C,oCAEMV,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBqB,GAOtC,OANPA,EAAgBN,UAAUW,OAAOxB,GAEjCyB,WAAW,WACTzB,EAAa0B,UACZ,MAEI,EAGF,OAAA,GAGTlB,EAAcoB,KAAKX,EAAsBR,IACzCD,EAAcoB,KAAKX,EAAsBF,IAsCzCP,EAAcoB,KAlCe,WACrBC,IAAAA,EAAab,EAAML,MAAMU,MAAMC,OAEjCO,GAAe,KAAfA,EAAmB,CACrBb,EAAMZ,UAAqBY,SAAAA,OAAAA,EAAMN,MAAMa,cAAvC,oBAEMvB,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBkB,GAOtC,OANPA,EAAMH,UAAUW,OAAOxB,GAEvByB,WAAW,WACTzB,EAAa0B,UACZ,MAEI,EAKL,IAFU,wCAEHI,KAAKD,GAAa,CAC3Bb,EAAMZ,UAAY,8BAEZJ,IAAAA,EAAeH,EAAKC,QAAAA,mBAAmBkB,GAOtC,OANPA,EAAMH,UAAUW,OAAOxB,GAEvByB,WAAW,WACTzB,EAAa0B,UACZ,MAEI,EAGF,OAAA,EAGUK,IAEMvB,EAAcwB,MAAM,SAACC,GAAeA,OAAe,IAAfA,KAG3D1B,EAAM2B,kBAIJC,EAAOlC,SAASa,cAAc,cACpCqB,EAAKC,iBAAiB,SAAU9B","file":"validForm.d1e57894.js","sourceRoot":"..\\src","sourcesContent":["const FUNC = {\n  createErrorElement: (elementName) => {\n    const errorElement = document.createElement('p');\n    errorElement.innerHTML = elementName.errorText;\n    errorElement.setAttribute('class', 'error');\n\n    return errorElement;\n  },\n};\n\nexport default FUNC;\n","import FUNC from '../helpers/_functions';\n\nconst validateForm = (event) => {\n  const isFieldsValid = [];\n\n  const name = {\n    title: 'Name',\n    input: document.getElementById('name'),\n    container: document.querySelector('#name-container'),\n    errorText: null,\n  };\n\n  const surname = {\n    title: 'Surname',\n    input: document.getElementById('surname'),\n    container: document.querySelector('#surname-container'),\n    errorText: null,\n  };\n\n  const phone = {\n    title: 'Phone',\n    input: document.getElementById('phone'),\n    container: document.querySelector('#phone-container'),\n    errorText: null,\n  };\n\n  // text type validation start\n  const validateTextTypeInput = (el) => {\n    const textTypeElement = el;\n\n    const elementValue = textTypeElement.input.value.trim();\n\n    if (elementValue === '') {\n      textTypeElement.errorText = `Field ${textTypeElement.title.toLowerCase()} cannot be empty`;\n\n      const errorElement = FUNC.createErrorElement(textTypeElement);\n      textTypeElement.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    if (elementValue.length < 3) {\n      textTypeElement.errorText = `${textTypeElement.title} must be minimum 3 characters`;\n\n      const errorElement = FUNC.createErrorElement(textTypeElement);\n      textTypeElement.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    if (elementValue.length >= 20) {\n      textTypeElement.errorText = `${textTypeElement.title} must be less than 20 characters`;\n\n      const errorElement = FUNC.createErrorElement(textTypeElement);\n      textTypeElement.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  isFieldsValid.push(validateTextTypeInput(name));\n  isFieldsValid.push(validateTextTypeInput(surname));\n  // text type validation end\n\n  // phone validation start\n  const validateTelTypeInput = () => {\n    const phoneValue = phone.input.value.trim();\n\n    if (phoneValue === '') {\n      phone.errorText = `Field ${phone.title.toLowerCase()} cannot be empty`;\n\n      const errorElement = FUNC.createErrorElement(phone);\n      phone.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 2000);\n\n      return false;\n    }\n\n    const regex = /^\\+38\\(0\\d{2}\\)\\s\\d{3}\\s\\d{2}\\s\\d{2}$/;\n\n    if (!regex.test(phoneValue)) {\n      phone.errorText = 'Phone format does not match';\n\n      const errorElement = FUNC.createErrorElement(phone);\n      phone.container.append(errorElement);\n\n      setTimeout(() => {\n        errorElement.remove();\n      }, 4000);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  isFieldsValid.push(validateTelTypeInput());\n  // phone validation end\n  const isAllFieldsValid = isFieldsValid.every((fieldValid) => fieldValid === true);\n\n  if (!isAllFieldsValid) {\n    event.preventDefault();\n  }\n};\n\nconst form = document.querySelector('.user-form');\nform.addEventListener('submit', validateForm);\n"]}